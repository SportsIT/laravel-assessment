openapi: 3.1.0
info:
  title: TODO API
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8000/api/v1
    description: Local development server
paths:
  /users:
    get:
      operationId: usersIndex
      description: Get list of users
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/userResource'
    post:
      operationId: usersCreate
      description: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/newUserResource'
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/userResource'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: userRead
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/userResource'
    patch:
      operationId: userUpdate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - id
                    - type
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
                      enum:
                        - 'users'
                    attributes:
                      $ref: '#/components/schemas/userAttributes'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/userResource'
    delete:
      operationId: userDelete
      responses:
        204:
          description: Deleted
  /users/{userId}/todos:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: userGetTodos
      responses:
        200:
          description: A list of the users todos
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/todoResource'
  /todos:
    get:
      operationId: todosIndex
      responses:
        200:
          description: A list of todos
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/todoResource'
    post:
      operationId: todosCreate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  allOf:
                    - $ref: '#/components/schemas/newUserResource'
                  required:
                    - attributes
                    - relationships
                  properties:
                    attributes:
                      allOf:
                        - required:
                            - description
                        - $ref: '#/components/schemas/todoAttributes'
                    relationships:
                      allOf:
                        - required:
                            - user
                        - $ref: '#/components/schemas/todoRelationships'
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/todoResource'
  /todos/{todoId}:
    parameters:
      - name: todoId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: todoRead
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/todoResource'
    patch:
      operationId: todoUpdate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - id
                    - type
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
                      enum:
                        - 'todos'
                    attributes:
                      $ref: '#/components/schemas/todoAttributes'
                    relationships:
                      type: object
                      properties:
                        user:
                          type: object
                          required:
                            - data
                          properties:
                            data:
                              type: object
                              required:
                                - id
                                - type
                              properties:
                                id:
                                  type: string
                                  format: uuid
                                type:
                                  type: string
                                  enum:
                                    - 'users'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/todoResource'
    delete:
      operationId: todoDelete
      responses:
        204:
          description: Deleted
components:
  schemas:
    newUserResource:
      type: object
      required:
        - type
        - attributes
      properties:
        type:
          type: string
          enum:
            - 'users'
        attributes:
          allOf:
            - required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            - $ref: '#/components/schemas/userAttributes'
    newTodoResource:
      type: object
      required:
        - attributes
        - relationships
      properties:
        type:
          type: string
          enum:
            - 'todos'
        attributes:
          allOf:
            - required:
                - description
            - $ref: '#/components/schemas/todoAttributes'
        relationships:
          allOf:
            - required:
                - user
            - $ref: '#/components/schemas/todoRelationships'
    userResource:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
            meta:
              type: object
              properties:
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
        - $ref: '#/components/schemas/newUserResource'
    todoResource:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
            meta:
              type: object
              properties:
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
        - $ref: '#/components/schemas/newTodoResource'
    userAttributes:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
    todoAttributes:
      type: object
      properties:
        description:
          type: string
        priority:
          type: string
          default: medium
          enum:
            - low
            - medium
            - high
            - highest
        dueDate:
          type: string
          format: date-time
        completedAt:
          oneOf:
            - type: 'null'
            - type: string
              format: date-time
    todoRelationships:
      type: object
      properties:
        user:
          type: object
          properties:
            data:
              oneOf:
                - type: 'null'
                - type: object
                  required:
                    - id
                    - type
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
                      enum:
                        - 'users'
